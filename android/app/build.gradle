apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"

/**
 * This is the configuration block to customize your React Native Android app.
 * By default you don't need to apply any configuration, just uncomment the lines you need.
 */
react {
    /* Folders */
    //   The root of your project, i.e. where "package.json" lives. Default is '../..'
    // root = file("../../")
    //   The folder where the react-native NPM package is. Default is ../../node_modules/react-native
    // reactNativeDir = file("../../node_modules/react-native")
    //   The folder where the react-native Codegen package is. Default is ../../node_modules/@react-native/codegen
    // codegenDir = file("../../node_modules/@react-native/codegen")
    //   The cli.js file which is the React Native CLI entrypoint. Default is ../../node_modules/react-native/cli.js
    // cliFile = file("../../node_modules/react-native/cli.js")

    /* Variants */
    //   The list of variants to that are debuggable. For those we're going to
    //   skip the bundling of the JS bundle and the assets. By default is just 'debug'.
    //   If you add flavors like lite, prod, etc. you'll have to list your debuggableVariants.
    // debuggableVariants = ["liteDebug", "prodDebug"]

    /* Bundling */
    //   A list containing the node command and its flags. Default is just 'node'.
    // nodeExecutableAndArgs = ["node"]
    //
    //   The command to run when bundling. By default is 'bundle'
    // bundleCommand = "ram-bundle"
    //
    //   The path to the CLI configuration file. Default is empty.
    // bundleConfig = file(../rn-cli.config.js)
    //
    //   The name of the generated asset file containing your JS bundle
    // bundleAssetName = "MyApplication.android.bundle"
    //
    //   The entry file for bundle generation. Default is 'index.android.js' or 'index.js'
    // entryFile = file("../js/MyApplication.android.js")
    //
    //   A list of extra flags to pass to the 'bundle' commands.
    //   See https://github.com/react-native-community/cli/blob/main/docs/commands.md#bundle
    // extraPackagerArgs = []

    /* Hermes Commands */
    //   The hermes compiler command to run. By default it is 'hermesc'
    // hermesCommand = "$rootDir/my-custom-hermesc/bin/hermesc"
    //
    //   The list of flags to pass to the Hermes compiler. By default is "-O", "-output-source-map"
    // hermesFlags = ["-O", "-output-source-map"]

    /* Autolinking */
    autolinkLibrariesWithApp()
}

// You can toggle Proguard minification here for release builds
def enableProguardInReleaseBuilds = false

// JavaScriptCore flavor - Intl variant available for better locale support
def jscFlavor = 'io.github.react-native-community:jsc-android:2026004.+'

// ---- ADDED: Load environment variables from project properties or environment variables ----
// This function safely loads a property or environment variable with a fallback default.
def getEnvVar = { key, defaultValue = '' ->
    def value = System.getenv(key)
    if (value == null || value.isEmpty()) {
        return project.hasProperty(key) ? project.property(key) : defaultValue
    }
    return value
}

// Load keystore properties here using getEnvVar
def keystoreProperties = [
    storeFile: getEnvVar("MYAPP_UPLOAD_STORE_FILE"),
    keyAlias: getEnvVar("MYAPP_UPLOAD_KEY_ALIAS"),
    storePassword: getEnvVar("MYAPP_UPLOAD_STORE_PASSWORD"),
    keyPassword: getEnvVar("MYAPP_UPLOAD_KEY_PASSWORD")
]
// ---- END OF ADDED SECTION ----

android {
    ndkVersion rootProject.ext.ndkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    compileSdk rootProject.ext.compileSdkVersion 
    namespace "com.autolive"   

    defaultConfig {
        applicationId "com.autolive"
        minSdkVersion 24
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
    }

    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        release {
            // Use loaded keystore properties only if they exist
            if (keystoreProperties.storeFile != null && keystoreProperties.storeFile != '') {
                storeFile file(keystoreProperties.storeFile)
                storePassword keystoreProperties.storePassword
                keyAlias keystoreProperties.keyAlias
                keyPassword keystoreProperties.keyPassword
            } else {
                // Fallback to default debug if no keystore is defined (optional)
                println "Warning: Keystore properties not found. Release signing config will not be set properly."
            }
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release { 
            signingConfig signingConfigs.release
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }
}

dependencies { 
    configurations.all {
        exclude group: 'org.jitsi', module: 'webrtc'
    }
    // The version of react-native is set by the React Native Gradle Plugin
    implementation("com.facebook.react:react-android")

    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }
}
